//Real-Time Ticketing System Backend by Heshan Ratnaweera, Student ID UOW: W2082289 IIT: 20222094.
package com.hkrw2082289.ticketing_system.model;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This class represents a ticket entity in the Real-time ticketing system, which contains details about the ticket
 * such as event name, price, duration, vendor id, ticket status, and customer id.
 *
 * This class is mapped to the "ticketpool" table in the database, and it supports batch generation of tickets.
 */
@Entity
@Table(name = "ticketpool")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TicketEntity {

    /**
     * This is the unique identifier for each ticket.
     * This value is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID generation
    @Column(name = "ticket_id", nullable = false, updatable = false)
    private Long ticketId;

    /**
     * This is the name of the event associated with the ticket.
     * This value is required and cannot be null.
     */
    @Column(name = "event_name", length = 50, nullable = false)
    private String eventName;

    /**
     * This is the price of the ticket.
     * This value is required and cannot be null.
     */
    @Column(name = "price", nullable = false)
    private BigDecimal price;

    /**
     * This is the duration of the event associated with the ticket.
     * This value is required and cannot be null.
     */
    @Column(name = "time_duration", length = 50, nullable = false)
    private String timeDuration;

    /**
     * This is the date of the event associated with the ticket.
     * This value is required and cannot be null.
     */
    @Column(name = "date", nullable = false)
    private Date date;

    /**
     * This is identifier of the vendor offering the ticket.
     * This value is required and cannot be null.
     */
    @Column(name = "vendor_id", length = 7, nullable = false)
    private String vendorId;

    /**
     * This is the status of the ticket, indicating whether it is Available or Booked.
     * The default value is "Available".
     */
    @Column(name = "ticket_status", length = 50, nullable = false)
    private String ticketStatus = "Available";

    /**
     * This is the identifier of the customer who has booked the ticket.
     * This value is optional and can be null if the ticket is available with ticket status as Available..
     */
    @Column(name = "customer_id", length = 7)
    private String customerId = null;

    /**
     * This method generates a batch of tickets for a specific vendor, event, and other details.
     *
     * @param vendorId the vendor offering/adding the tickets to the system.
     * @param eventName the name of the event for all the tickets of the batch generated.
     * @param price the price of each ticket for all the tickets of the batch generated.
     * @param timeDuration the duration of the event for all the tickets of the batch generated.
     * @param date the date of the event for all the tickets of the batch generated.
     * @param batchSize the number of tickets to be generated.
     * @return a list of generated TicketEntity objects.
     */
    public static List<TicketEntity> generateTicketBatch(String vendorId,
                                                         String eventName,
                                                         double price,
                                                         String timeDuration,
                                                         String date,
                                                         int batchSize) {
        List<TicketEntity> tickets = new ArrayList<>();
        for (int i = 0; i < batchSize; i++) {
            TicketEntity ticket = new TicketEntity();
            ticket.setVendorId(vendorId);
            ticket.setEventName(eventName);
            ticket.setPrice(BigDecimal.valueOf(price));
            ticket.setTimeDuration(timeDuration);
            ticket.setDate(java.sql.Date.valueOf(date));
            tickets.add(ticket);
        }
        return tickets;
    }
}

